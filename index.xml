<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://xiaowoniu22.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2023 12:11:08 +0800</lastBuildDate><atom:link href="https://xiaowoniu22.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>教育的本质是什么</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern8/</link>
      <pubDate>Wed, 01 Feb 2023 12:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern8/</guid>
      <description>三体星球生态环境那么差，三体人可以发展出如此高的文明是因为三体人的记忆是可以遗传的。而人类的记忆是不能遗传的，每一个新生的个体都需要重新生长，创建自己的记忆体系。因此，人类只能将上一代的文明通过载体来记载，使文明得以传承。以前是文字载体，数字时代之后可以有更多的载体。
教育的目的就是延续文明的发展成果并期待新的发展。
那什么样的教育才能实现这个目的呢？
首先，教育中强调阅读的重要性。阅读就是对文明载体的了解和学习，所以阅读或者说输入是重要的，阅读和输入就是站在前人的肩膀上，就是记忆遗传的基础。
有了记忆遗传的基础，并不是完全实现了记忆遗传。
通常，我们会听到大家诟病的教育中的问题，比如重复的机械式背诵；重复的大量计算；缺乏创造性等等。这些教育方式之所以被诟病是因为这些方式都缺少了对文明诞生过程的演绎，将文明载体通过机械记忆的方式灌入大脑，期待被问到相同问题时可以节约时间，不经思考的脱口而出，并以此为傲。
实际上，回答相同的问题是没有意义的，教育的目的也不在此。或许你会说对每个个体来说这种机械记忆和计算是有意义的，因为对个体来说这也是从无到有的创造。可是，如果每一代要做的事都是如此，那人类文明不过是一代又一代的重复罢了。因此，重复和复述是孱弱的。
那什么样的教育才是有意义的？我认为了解和重视文明的发展过程是有意义的。你知道一个结论诞生的过程，这个过程因何而起，中途产生过怎样的分歧，在什么样的情况下得以突破，最终为何形成如今的结论，每一步的成果又是如何指导实践的，实践的过程出现了什么问题，又是如何修正的，以及如果不是顺着现在的这条路发展，会不会有其他的可能。
了解这个过程的演绎，你或许可以少走弯路，又或者可以试试之前没走过的路。总之，你想试试，想做点什么。</description>
    </item>
    
    <item>
      <title>不要再纠结于原型链和继承了</title>
      <link>https://xiaowoniu22.github.io/posts/post16/</link>
      <pubDate>Thu, 10 Nov 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post16/</guid>
      <description>从这两个角度角度理解js原型链和继承，希望你不要再纠结原型链了。
原型链就是链表 从构造函数的属性（及方法）的类型出发来实现继承（此处没有考虑静态属性和方法） 首先，要明白原型链就是链表，链表就包含节点和连接方式两个要素。实例对象或者构造函数的原型对象都可以作为节点，总之节点就是个对象。连接方式就是每个节点的__proto__（[[Prototype]]）,每个节点通过__proto__指向上一个节点来实现继承。
所以，当你需要实现继承的时候只需要将节点的__proto__指向需要继承的父节点就可以了。这时你可能想到直接修改子节点的__proto__，像这样
child.prototype.__proto__ = Parent.prototype 但是
此时，你需要一个新的对象，这个对象的__proto__ 指向Parent.</description>
    </item>
    
    <item>
      <title>努力和进步是不相关的两件事</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern7/</link>
      <pubDate>Tue, 01 Nov 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern7/</guid>
      <description>当你想明白了努力和进步是两件毫无关联的事之后，你就不在纠结于为什么自己努力了却没有进步，而是去研究怎么才能让二者产生关联。</description>
    </item>
    
    <item>
      <title>shader</title>
      <link>https://xiaowoniu22.github.io/posts/post10/</link>
      <pubDate>Tue, 25 Oct 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post10/</guid>
      <description>有时你会觉得用 GLSL 编程就像是把一搜船放到了瓶子里。它同等地困难、美丽而令人满足。 ——The Book of Shaders
一、 shader学习资料</description>
    </item>
    
    <item>
      <title>去做门槛更高的事情</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern6/</link>
      <pubDate>Tue, 18 Oct 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern6/</guid>
      <description>去做门槛更高的事情，提高自己的不可替代性。</description>
    </item>
    
    <item>
      <title>mvp——图形学基础</title>
      <link>https://xiaowoniu22.github.io/posts/post9/</link>
      <pubDate>Sun, 16 Oct 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post9/</guid>
      <description>引擎推动的不是飞船而是宇宙。飞船压根就没动过。
一、 模型空间
Model Matrix将模型空间转换为世界空间
二、世界空间
View Matrix将世界空间转换为摄像空间
三、摄像空间</description>
    </item>
    
    <item>
      <title>线性代数——图形学基础</title>
      <link>https://xiaowoniu22.github.io/posts/post8/</link>
      <pubDate>Fri, 14 Oct 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post8/</guid>
      <description>有一天我突发奇想，线性代数中的向量是不是就是故事中火柴人一样的存在，线性代数要给我们讲个故事，但是没有人物的故事很难讲下去，于是安排了向量作为故事的主角，故事就徐徐展开了&amp;hellip;&amp;hellip;
一、 线性变换的本质是空间变换
线性变换的本质是空间变换，线性代数则是空间变换的代数表达。代数表达是计算的基础。而向量，则只是线性变换的载体。
二、矩阵与空间变换的关系
矩阵向量乘法表示线性变换
矩阵乘法表示线性变换复合
三、齐次坐标
齐次坐标真是妙啊。</description>
    </item>
    
    <item>
      <title>关于数学的一点点思考</title>
      <link>https://xiaowoniu22.github.io/posts/post15/</link>
      <pubDate>Mon, 10 Oct 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post15/</guid>
      <description>关于数学的一点点思考
很长一段时间我始终想不明白我为什么要不停的做题，做复杂的计算，直到我最近在重学线性代数。
如果你想通过代码模拟物理世界的光照效果， 你需要计算物体表面的法向量；
如果空间发生了变换，你需要计算变换之后的法向量，你需要先求得变换矩阵的逆转置矩阵。
回想一下，我之前一直关注的是逆转置矩阵的求解公式，并通过做题来巩固它，但是逆转置矩阵的现实意义我却是不知道的。而现在，公式的求解过程我会通过数学方法库去计算，关注数学的现实意义才是最有价值的。</description>
    </item>
    
    <item>
      <title>不要让你的大脑再自动驾驶了</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern5/</link>
      <pubDate>Sat, 08 Oct 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern5/</guid>
      <description>不要让你的大脑再自动驾驶了</description>
    </item>
    
    <item>
      <title>我对前端性能的一点理解</title>
      <link>https://xiaowoniu22.github.io/posts/post14/</link>
      <pubDate>Sat, 10 Sep 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post14/</guid>
      <description>我对前端性能的一点理解
大多数情况性能没那么重要，因为react已经够快了。而如何组织代码是重要的。
一、代码规范和编程习惯是有利于性能的，在编程过程中应该遵守。比如：
1、不使用内联style
2、减少reflow， reflow会引起repain，repaint是整个页面的重新渲染
二、从工程话的角度优化性能，如gzip，dll等。就像前面说的，如何组织代码很重要 三、有些优化方案不是绝对的，要看场景和项目规模，是发生了性能问题才去优化的（借助工具去检测性能）</description>
    </item>
    
    <item>
      <title>读书的作用是不是被夸大了？</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern4/</link>
      <pubDate>Thu, 08 Sep 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern4/</guid>
      <description>为什么读书被鼓励，刷视频被说成浪费时间？
两者的本质都是获取信息，只不过媒介不一样。甚至可以说视频的沉浸式感受更强，对信息的印象也更深刻。如果只说刷短视频是浪费时间，短视频的内容没有结构性的逻辑，那看有些书也存在相同的问题。可见，问题的本身并不是获取信息的媒介问题，而是信息本身的问题。
如果信息内容相同，读书和视频有什么区别
那么，如果完全相同的内容，分别以文字的形式和视频的形式展示，又有什么不同呢。我能想到的是
1、文字的信息密度更大一些，通过读书的方式在相同时间内获取的信息量更大
2、视频存在更多的视觉干扰，看视频的方式会影响思维的连贯性和集中度
但是，视频也有文字载体没有的优势。所以问题的本质不是获取信息的形式和载体，信息本身才是关键。不同的信息可以采取不同的信息获取方式。</description>
    </item>
    
    <item>
      <title>学习的本质是对抗遗忘吗？</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern3/</link>
      <pubDate>Sat, 03 Sep 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern3/</guid>
      <description>学习的本质是对抗遗忘吗？ 记住了概念跟学会了完全是两码事
学习的本质是指导实践，那为什么我们总是被要求记住呢？</description>
    </item>
    
    <item>
      <title>前端的终极问题是复用——一句话解释一个概念</title>
      <link>https://xiaowoniu22.github.io/posts/post13/</link>
      <pubDate>Wed, 10 Aug 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post13/</guid>
      <description>前端的终极问题就是复用吧
组件封装——UI的复用 hooks——状态逻辑的复用</description>
    </item>
    
    <item>
      <title>promise就是状态机——一句话解释一个概念</title>
      <link>https://xiaowoniu22.github.io/posts/post12/</link>
      <pubDate>Fri, 05 Aug 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post12/</guid>
      <description>我告诉你，Promise就是有限状态机，这样就容易理解了吧
一、 有限状态机
有限个状态
链式绑定回调函数
状态转移触发回调函数
回调函数的绑定和触发也是订阅模式的思想</description>
    </item>
    
    <item>
      <title>原型链就是链表——一句话解释一个概念</title>
      <link>https://xiaowoniu22.github.io/posts/post11/</link>
      <pubDate>Wed, 03 Aug 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post11/</guid>
      <description>Hi，原型链就是链表
一、 节点和连接方式
原型链上的节点是各种实例对象和原型对象，如： Function.prototype 、 Object.prototype ……
原型链通过 __proto __ 属性连接各种原型对象</description>
    </item>
    
    <item>
      <title>新想法</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern2/</link>
      <pubDate>Mon, 01 Aug 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern2/</guid>
      <description>最近看到一句话，”凡是我不能创造的,我就不能真正理解“，是物理学家费曼的名言，我想，创造的难度还是挺大的，我先来进行一下一句话解释一个概念的挑战</description>
    </item>
    
    <item>
      <title>珍奇屋</title>
      <link>https://xiaowoniu22.github.io/wunderkammern/wunderkammern1/</link>
      <pubDate>Tue, 14 Jun 2022 11:11:08 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/wunderkammern/wunderkammern1/</guid>
      <description>珍奇屋是15到18世纪间，欧洲收藏家用于陈列自己收藏的稀奇物件和珍贵文物的屋子，是博物馆的前身。
八、九岁的时候我用鞋盒子给自己做过一个百宝箱，里边存着那个时候自己珍惜的宝贝，有一对喷着金漆的塑料小蟋蟀，站在纸板底座的弹簧叶子上，一碰就摇摇晃晃的动。还有姐姐送的钢笔，方便面里攒的小卡片，漂亮的包装盒&amp;hellip;&amp;hellip;后来因为上学，离家越来越远，二十几年过去，我的百宝箱也没有踪影了。
如今，在这里造个珍奇屋作为我童年百宝箱的延续吧，记录我的奇怪想法，我的经历，收纳我读过的书，我的奇珍异宝。</description>
    </item>
    
    <item>
      <title>英语学习——原版书籍阅读</title>
      <link>https://xiaowoniu22.github.io/posts/post3/</link>
      <pubDate>Mon, 13 Jun 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post3/</guid>
      <description>之前很长一段时间，我的英语学习一直停留在没有实质进步但也不愿意放弃的状态。坚持每周做着听力训练，但是数量不足，所以坚持了很长一段时间依然是原本听不懂的现在依然听不懂。最近我决定换个方法试试。
原版书籍阅读
1、 找简单易读的英文原版书入门。简单易读，最好有趣味性，能够坚持读下去。我找了《神奇树屋》（Magic Tree House）系列。 2、扩展阅读继续读。读了5本Magic Tree House之后我开始想换个口味，于是开始读同样有趣易读的Roald Dahl的《Matilda》《The Magic Finger》。 3、找自己感兴趣的原版读。读完了以上我看到的这本《One Man&amp;rsquo;s View of hre World》,我本人之一比较喜欢读政经类的书.</description>
    </item>
    
    <item>
      <title>JS中的求值策略</title>
      <link>https://xiaowoniu22.github.io/posts/post2/</link>
      <pubDate>Sun, 13 Jun 2021 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post2/</guid>
      <description>一、是啥 求值策略（Evaluation strategy）是啥？
是一种策略 是一种决定什么时候，用什么方式计算函数参数的策略
是一种分为严格求值和非严格求值的策略 二、为啥 为啥会需要这样一种策略？
定义一个函数
function sum(x, y) { return x + y; } 调用它</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第四周</title>
      <link>https://xiaowoniu22.github.io/posts/post7/</link>
      <pubDate>Sun, 05 Apr 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post7/</guid>
      <description>一、Algorithm 365. 水壶问题
二、Review 3 Examples of When Not to Use JavaScript Arrow Functions</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第三周</title>
      <link>https://xiaowoniu22.github.io/posts/post6/</link>
      <pubDate>Sun, 29 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post6/</guid>
      <description>一、Algorithm 165. 比较版本号 二、Review 8 Great Websites to Learn New Tech Skills During the Covid-19 Pandemic</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第二周</title>
      <link>https://xiaowoniu22.github.io/posts/post5/</link>
      <pubDate>Sun, 22 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post5/</guid>
      <description>一、Algorithm 20. 有效的括号 我的思路：
字符串第一位入栈，之后的每一位依次和前一位匹配，匹配成功，出栈，不成功则入栈。最终，栈为空，则是有效括号，否则无效。
二、Review 9 Tips for Building Awesome Reusable React Components</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第一周</title>
      <link>https://xiaowoniu22.github.io/posts/post4/</link>
      <pubDate>Sun, 15 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post4/</guid>
      <description>一、Algorithm 121. 买卖股票的最佳时机
本人的暴力解法： 最优解法：
二、Review 4 Best Practices To Write Quality JavaScript Modules</description>
    </item>
    
    <item>
      <title>React setState合并和批量处理——React</title>
      <link>https://xiaowoniu22.github.io/posts/post1/</link>
      <pubDate>Sat, 14 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post1/</guid>
      <description>State的更新什么时候是同步，什么时候是异步
1、 State的更新什么时候是同步，什么时候是异步。
正如我们所知，react中使用setState更新state,而state的更新大多数情况下是异步的，但是有些情况却是同步的。 在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。**
二、为什么是异步
如果setState是同步更新state，而state的更新又会触发组件的重新渲染，那么每次setState都会渲染组件，这对性能是很大的消耗。所以react进行了setState的合并和批量延迟更新，正如官网所述：
三、如何实现setState的合并和批量延迟
查看react源码发现，代码中有一个变量锁isBatchingUpdates，isBatchingUpdates表示是否进行批量更新，初始化时默认为false，batchedUpdates方法会将isBatchingUpdates设为true
var ReactDefaultBatchingStrategy = { isBatchingUpdates: false, batchedUpdates: function(callback, a, b, c, d, e) { var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.</description>
    </item>
    
    <item>
      <title>Contact Us</title>
      <link>https://xiaowoniu22.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaowoniu22.github.io/contact/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labor.</description>
    </item>
    
    <item>
      <title>John Doe</title>
      <link>https://xiaowoniu22.github.io/author/john-doe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaowoniu22.github.io/author/john-doe/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</description>
    </item>
    
    <item>
      <title>Mark Dinn</title>
      <link>https://xiaowoniu22.github.io/author/mark-dinn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaowoniu22.github.io/author/mark-dinn/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</description>
    </item>
    
    <item>
      <title>Threejs</title>
      <link>https://xiaowoniu22.github.io/threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaowoniu22.github.io/threejs/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

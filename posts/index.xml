<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://xiaowoniu22.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2022 14:49:24 +0800</lastBuildDate><atom:link href="https://xiaowoniu22.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>promise就是状态机—挑战一句话解释一个概念</title>
      <link>https://xiaowoniu22.github.io/posts/post12/</link>
      <pubDate>Fri, 05 Aug 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post12/</guid>
      <description>我告诉你，Promise就是有限状态机，这样就容易理解了吧
一、 有限状态机
有限个状态
链式绑定回调函数
状态转移触发回调函数
回调函数的绑定和触发也是订阅模式的思想</description>
    </item>
    
    <item>
      <title>原型链就是链表——挑战一句话解释一个概念</title>
      <link>https://xiaowoniu22.github.io/posts/post11/</link>
      <pubDate>Tue, 02 Aug 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post11/</guid>
      <description>Hi，原型链就是链表
一、 节点和连接方式
原型链上的节点是各种实例对象和原型对象，如： Function.prototype 、 Object.prototype ……
原型链通过 __proto __ 属性连接各种原型对象</description>
    </item>
    
    <item>
      <title>shader</title>
      <link>https://xiaowoniu22.github.io/posts/post10/</link>
      <pubDate>Mon, 25 Jul 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post10/</guid>
      <description>有时你会觉得用 GLSL 编程就像是把一搜船放到了瓶子里。它同等地困难、美丽而令人满足。 ——The Book of Shaders
一、 shader学习资料</description>
    </item>
    
    <item>
      <title>mvp——图形学基础</title>
      <link>https://xiaowoniu22.github.io/posts/post9/</link>
      <pubDate>Sat, 16 Jul 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post9/</guid>
      <description>引擎推动的不是飞船而是宇宙。飞船压根就没动过。
一、 模型空间
Model Matrix将模型空间转换为世界空间
二、世界空间
View Matrix将世界空间转换为摄像空间
三、摄像空间</description>
    </item>
    
    <item>
      <title>线性代数——图形学基础</title>
      <link>https://xiaowoniu22.github.io/posts/post8/</link>
      <pubDate>Thu, 14 Jul 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post8/</guid>
      <description>有一天我突发奇想，线性代数中的向量是不是就是故事中火柴人一样的存在，线性代数要给我们讲个故事，但是没有人物的故事很难讲下去，于是安排了向量作为故事的主角，故事就徐徐展开了&amp;hellip;&amp;hellip;
一、 线性变换的本质是空间变换
线性变换的本质是空间变换，线性代数则是空间变换的代数表达。代数表达是计算的基础。而向量，则只是线性变换的载体。
二、矩阵与空间变换的关系
矩阵向量乘法表示线性变换
矩阵乘法表示线性变换复合
三、齐次坐标
齐次坐标真是妙啊。</description>
    </item>
    
    <item>
      <title>英语学习——原版书籍阅读</title>
      <link>https://xiaowoniu22.github.io/posts/post3/</link>
      <pubDate>Mon, 13 Jun 2022 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post3/</guid>
      <description>之前很长一段时间，我的英语学习一直停留在没有实质进步但也不愿意放弃的状态。坚持每周做着听力训练，但是数量不足，所以坚持了很长一段时间依然是原本听不懂的现在依然听不懂。最近我决定换个方法试试。
原版书籍阅读
1、 找简单易读的英文原版书入门。简单易读，最好有趣味性，能够坚持读下去。我找了《神奇树屋》（Magic Tree House）系列。 2、扩展阅读继续读。读了5本Magic Tree House之后我开始想换个口味，于是开始读同样有趣易读的Roald Dahl的《Matilda》《The Magic Finger》。 3、找自己感兴趣的原版读。读完了以上我看到的这本《One Man&amp;rsquo;s View of hre World》,我本人之一比较喜欢读政经类的书.</description>
    </item>
    
    <item>
      <title>JS中的求值策略</title>
      <link>https://xiaowoniu22.github.io/posts/post2/</link>
      <pubDate>Sun, 13 Jun 2021 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post2/</guid>
      <description>一、是啥 求值策略（Evaluation strategy）是啥？
是一种策略 是一种决定什么时候，用什么方式计算函数参数的策略
是一种分为严格求值和非严格求值的策略 二、为啥 为啥会需要这样一种策略？
定义一个函数
function sum(x, y) { return x + y; } 调用它</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第四周</title>
      <link>https://xiaowoniu22.github.io/posts/post7/</link>
      <pubDate>Sun, 05 Apr 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post7/</guid>
      <description>一、Algorithm 365. 水壶问题
二、Review 3 Examples of When Not to Use JavaScript Arrow Functions</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第三周</title>
      <link>https://xiaowoniu22.github.io/posts/post6/</link>
      <pubDate>Sun, 29 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post6/</guid>
      <description>一、Algorithm 165. 比较版本号 二、Review 8 Great Websites to Learn New Tech Skills During the Covid-19 Pandemic</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第二周</title>
      <link>https://xiaowoniu22.github.io/posts/post5/</link>
      <pubDate>Sun, 22 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post5/</guid>
      <description>一、Algorithm 20. 有效的括号 我的思路：
字符串第一位入栈，之后的每一位依次和前一位匹配，匹配成功，出栈，不成功则入栈。最终，栈为空，则是有效括号，否则无效。
二、Review 9 Tips for Building Awesome Reusable React Components</description>
    </item>
    
    <item>
      <title>ARTS打卡计划第一周</title>
      <link>https://xiaowoniu22.github.io/posts/post4/</link>
      <pubDate>Sun, 15 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post4/</guid>
      <description>一、Algorithm 121. 买卖股票的最佳时机
本人的暴力解法： 最优解法：
二、Review 4 Best Practices To Write Quality JavaScript Modules</description>
    </item>
    
    <item>
      <title>React setState合并和批量处理——React</title>
      <link>https://xiaowoniu22.github.io/posts/post1/</link>
      <pubDate>Sat, 14 Mar 2020 14:49:24 +0800</pubDate>
      
      <guid>https://xiaowoniu22.github.io/posts/post1/</guid>
      <description>State的更新什么时候是同步，什么时候是异步
1、 State的更新什么时候是同步，什么时候是异步。
正如我们所知，react中使用setState更新state,而state的更新大多数情况下是异步的，但是有些情况却是同步的。 在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。**
二、为什么是异步
如果setState是同步更新state，而state的更新又会触发组件的重新渲染，那么每次setState都会渲染组件，这对性能是很大的消耗。所以react进行了setState的合并和批量延迟更新，正如官网所述：
三、如何实现setState的合并和批量延迟
查看react源码发现，代码中有一个变量锁isBatchingUpdates，isBatchingUpdates表示是否进行批量更新，初始化时默认为false，batchedUpdates方法会将isBatchingUpdates设为true
var ReactDefaultBatchingStrategy = { isBatchingUpdates: false, batchedUpdates: function(callback, a, b, c, d, e) { var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.</description>
    </item>
    
  </channel>
</rss>
